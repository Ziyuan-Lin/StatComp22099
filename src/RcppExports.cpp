// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// subgradient_cpp
Rcpp::List subgradient_cpp(arma::mat Y, arma::mat X, arma::vec lam, arma::mat B0, double conv, int miter);
RcppExport SEXP _StatComp22099_subgradient_cpp(SEXP YSEXP, SEXP XSEXP, SEXP lamSEXP, SEXP B0SEXP, SEXP convSEXP, SEXP miterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type miter(miterSEXP);
    rcpp_result_gen = Rcpp::wrap(subgradient_cpp(Y, X, lam, B0, conv, miter));
    return rcpp_result_gen;
END_RCPP
}
// SRRR_cpp
Rcpp::List SRRR_cpp(arma::mat Y, arma::mat X, String method, arma::mat A0, arma::mat V0, int r, double lambda, double conv, int miter, double inner_conv, double inner_iter, arma::vec WA);
RcppExport SEXP _StatComp22099_SRRR_cpp(SEXP YSEXP, SEXP XSEXP, SEXP methodSEXP, SEXP A0SEXP, SEXP V0SEXP, SEXP rSEXP, SEXP lambdaSEXP, SEXP convSEXP, SEXP miterSEXP, SEXP inner_convSEXP, SEXP inner_iterSEXP, SEXP WASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type miter(miterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_conv(inner_convSEXP);
    Rcpp::traits::input_parameter< double >::type inner_iter(inner_iterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WA(WASEXP);
    rcpp_result_gen = Rcpp::wrap(SRRR_cpp(Y, X, method, A0, V0, r, lambda, conv, miter, inner_conv, inner_iter, WA));
    return rcpp_result_gen;
END_RCPP
}
// ei
arma::vec ei(arma::mat M);
RcppExport SEXP _StatComp22099_ei(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(ei(M));
    return rcpp_result_gen;
END_RCPP
}
// gibbsC
NumericMatrix gibbsC(int N, int burn, double rho);
RcppExport SEXP _StatComp22099_gibbsC(SEXP NSEXP, SEXP burnSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsC(N, burn, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatComp22099_subgradient_cpp", (DL_FUNC) &_StatComp22099_subgradient_cpp, 6},
    {"_StatComp22099_SRRR_cpp", (DL_FUNC) &_StatComp22099_SRRR_cpp, 12},
    {"_StatComp22099_ei", (DL_FUNC) &_StatComp22099_ei, 1},
    {"_StatComp22099_gibbsC", (DL_FUNC) &_StatComp22099_gibbsC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatComp22099(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
